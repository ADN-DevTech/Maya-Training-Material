#-
# ==========================================================================
# Copyright (C) 2008 Autodesk, Inc. and/or its licensors.  All 
# rights reserved.
#
# The coded instructions, statements, computer programs, and/or related 
# material (collectively the "Data") in these files contain unpublished 
# information proprietary to Autodesk, Inc. ("Autodesk") and/or its 
# licensors, which is protected by U.S. and Canadian federal copyright 
# law and by international treaties.
#
# The Data is provided for use exclusively by You. You have the right 
# to use, modify, and incorporate this Data into other products for 
# purposes authorized by the Autodesk software license agreement, 
# without fee.
#
# The copyright notices in the Software and this entire statement, 
# including the above license grant, this restriction and the 
# following disclaimer, must be included in all copies of the 
# Software, in whole or in part, and all derivative works of 
# the Software, unless such copies or derivative works are solely 
# in the form of machine-executable object code generated by a 
# source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
# AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED 
# WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF 
# NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
# PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
# TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS LICENSORS 
# BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
# DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK 
# AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
# OR PROBABILITY OF SUCH DAMAGES.
#
# ==========================================================================
#+

import maya.OpenMaya as om


# Return the centroid of a mesh.
def mesh(meshName):
	# Get the mesh's dag path.
	sList = om.MSelectionList()
	sList.add(meshName)
	path = om.MDagPath()
	sList.getDagPath(0, path)

	if not path.hasFn(om.MFn.kMesh):
		raise ValueError, "'" + meshName + "' is not a mesh."

	# Get the mesh's vertex positions.
	meshFn = om.MFnMesh(path)
	verts = om.MPointArray()
	meshFn.getPoints(verts, om.MSpace.kWorld)
	numVerts = verts.length()

	if numVerts == 0:
		raise ValueError, "Mesh '" + meshName + "' has no vertices."

	# Add all the vertex positions together.
	x = 0.0
	y = 0.0
	z = 0.0

	for i in range(0, numVerts):
		pt = verts[i]
		x += pt.x
		y += pt.y
		z += pt.z
	
	# Calculate the average position.
	divisor = 1.0 / numVerts
	x *= divisor
	y *= divisor
	z *= divisor

	return (x, y, z)
